LIB lib{

	latchedAdder(x,y,cin,clk,ss,sr;s,cout){
		LOGIC
		adder fullAdder(cin,x,y;s,cout);
		seq @SEQ[clk,cin,ss,sr,nd,nd,true,true];
	}
	
	eightBitAdder(x0,x1,x2,x3,x4,x5,x6,x7,y0,y1,y2,y3,y4,y5,y6,y7;s0,s1,s2,s3,s4,s5,s6,s7,s8){
		LOGIC
		adderB0 halfAdder(x0,y0;s0,c0);
		adderB1 fullAdder(c0,x1,y1;s1,c1);
		adderB2 fullAdder(c1,x2,y2;s2,c2);
		adderB3 fullAdder(c2,x3,y3;s3,c3);
		adderB4 fullAdder(c3,x4,y4;s4,c4);
		adderB5 fullAdder(c4,x5,y5;s5,c5);
		adderB6 fullAdder(c5,x6,y6;s6,c6);
		adderB7 fullAdder(c6,x7,y7;s7,s8);
	}
	
	fullAdder(cin,e0,e1;s,cout){
		LOGIC
		halfAdd1 halfAdder(e0,e1;intW1,intW2);
		halfAdd2 halfAdder(cin,intW1;s,intW3);
		or1 orGate(intW2,intW3;cout);
	}
	
	halfAdder(e0,e1;s,c){
		LOGIC
		xor1 xorGate(e0,e1;s);
		and1 andGate(e0,e1;c);
		
	}
	
	orGate(in1,in2;out){
		LOGIC
		out = in1+in2;
	}

	andGate(in1,in2;out){
		LOGIC
		out = in1*in2;
	}

	xorGate(in1,in2;out){
		LOGIC
		out = (in1+in2)*!(in1*in2);
	}

}
